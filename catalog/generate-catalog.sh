#!/bin/bash
# Script to generate an HTML wallpaper catalog.

# I'm probably the only one who needs it
# but I just want to share the code.

# Dependencies:
# find (findutils or other), ImageMagick

# Extra files required:
# config, styles.css, events.js, and previews.js

# Message functions
info(){
	echo -e "[i] $1"
}

work(){
	echo -en "[-] $1"
}

subwork(){
	echo -en " ⤷ [-] $1"
}

subinfo(){
	echo -e " ⤷ [i] $1"
}

print_done(){
	echo " done!"
}

warn(){
	echo -e "[!] $1"
}

# Function to parse the JSON file
parse_json() {
	jq "$1" "$2"
}

# Find all .info files. There shouldn't be any whitespace on the file path so this should work fine.
dir="${0%/*}"
infos=($(find "$dir/.." -name '.info'))

# Setup output directory
# If an argument was passed, treat that as the output directory.
if [[ -n "$1" ]]
then
	out_dir="$1"
else
	out_dir="out"
fi

mkdir -p "$out_dir" || exit $?

# Setup directory for the document output
doc_dir="$out_dir"
out_html="$doc_dir/index.html"

info "Writing document output to '$out_dir'"

# Setup trap
_trap(){
	warn "\n[!] SIGINT or SIGTERM received"
	exit 1
}
trap '_trap' SIGINT SIGTERM


# Write the HTML header
work "Writing HTML headers..."
cat > "$out_html" << EOF
<!doctype html>
<!-- Generated by Daringcuteseal's Wallpapers catalog generator -->
<!-- https://raw.githubusercontent.com/DaringCuteSeal/wallpapers/master/catalog/generate-catalog.sh -->

<html>
<head>
	<title>Wallpapers catalog</title>
	<link rel="stylesheet" href="/index.css">
	<link rel="stylesheet" href="syles.css">
	<meta charset=utf-8>
</head>
<body>
	<p><a href="/">Home</a></p>
	<p>This is a catalog of my wallpeppers. You can also visit my <a href="https://github.com/DaringCuteSeal/wallpapers">GitHub repository</a> directly.</p>

	<p>
		<span>All categories: </span>
EOF
print_done

# Create the directory for previews
preview_dir="$out_dir/previews"
mkdir -p "$preview_dir" || exit $?
info "Writing previews to '$preview_dir'"

# Generate categories
source "config"
work "Generating navigation for categories..."

# The j temporary variable is used to determine
# whether we need to add the bullet
# or not, since the last category don't
# need a bullet.
# and yes this is a bit dumb, fix this and make a PR if you want.
j=0
for i in "${!categories[@]}"
do
	echo -en "\t\t\t<a href=\"#${i}\">${categories[$i]}</a>" >> "$out_html"
	j=$(($j+1))
	if [[ $j -lt ${#categories[@]} ]]
	then
		echo " &bull;" >> "$out_html"
	fi
done
unset j

cat >> "$out_html" << EOF

		</p>
EOF

print_done

# Exit when a command fails
set -e

# Loop through every single wallpaper
for (( i=0; i<${#infos[@]}; i++ ))
do
	# Declare the variants as an associative array
	declare -A variants

	# Source the info file
	source "${infos[$i]}"

	work "Working on '$name'\n"

	subinfo "Generating wallpaper previews..."

	# Create preview images for every variant
	for j in "${!variants[@]}"
	do
		# Get the file name based on the variant
		filename="${variants[$j]}"

		if [[ -e "$out_dir/previews/${filename%*.png}-preview.webp" ]]
		then
			subinfo "Preview for $filename already exists, skipping..."
		else
			# Generate the preview image
			subwork "Generating preview for $filename... "
			convert -geometry 590x331 "../${dir}/${filename}" "$out_dir/previews/${filename%*.png}-preview.webp"
			print_done
		fi

	done


	# Add current wallpaper to its corresponding category
	# GOD CAN I HAVE 2 DIMENSIONAL ARRAYS?
	#eval "category_$category+=("$parsable_name")"
	#subinfo "Added '$name' to category '${categories[$category]}'"

	# Unset previous variables
	# These are hard-coded!
	unset name dir category variants filename

done

exit 0
# XXX huh.. correct? idk i my grammar broke. fix later
info "Generating HTML previews..."
for i in "${!categories}"
do
	work "Working on '${categories[$i]}'\n"

	# I went here after working on
	# the JavaScript code after a couple
	# days and I hate non-object-oriented
	# programming. Gah.
	category_counts="$(eval \"echo \"\${\#category_$category[@]}\"\")"
	echo "$category_counts"

	for (( j=0; j<${category_counts}; j++ ))
	do
		echo a
	done
done
	


